""" FSM Model - Autogenerated by Loki - Code Gen
"""
#!/usr/bin/env python3

from transitions.extensions import GraphMachine as Machine
from transitions import MachineError
from transitions.extensions.markup import MarkupMachine

# The states
states = [
{{#states}}
    { 'name': '{{name}}',
      'on_enter': [{{#on_enter}}'{{callback_name}}'{{^last}}, {{/last}}{{/on_enter}}],
      'on_exit': [{{#on_exit}}'{{callback_name}}'{{^last}}, {{/last}}{{/on_exit}}],
    }{{^last}}, {{/last}}
{{/states}}]

# And some transitions between states. We're lazy, so we'll leave out
# the inverse phase transitions (freezing, condensation, etc.).
transitions = [
{{# triggers }}
    {  'trigger': '{{name}}', 
       'source': '{{source}}', 
       'dest': '{{dest}}', 
       'conditions': [{{#conditions}}'{{callback_name}}'{{^last}}, {{/last}}{{/conditions}}]
    }{{^last}},{{/last}}
{{/ triggers }}
]


class {{class_name}}():
    """Summary
    """
{{# before_state_change }}
{{#before_state_change.0}}
#####
# BEFORE_STATE_CHANGE Callbacks for FSM {{name}}
#####
{{/before_state_change.0}}

    def {{callback_name}}(self):
        print("before_state_change Callback: {{callback_name}}")
        return True


{{/ before_state_change }}
{{# after_state_change }}
{{#after_state_change.0}}
#####
# AFTER_STATE_CHANGE Callbacks for FSM {{name}}
#####
{{/after_state_change.0}}

    def {{callback_name}}(self):
        print("after_state_change Callback: {{callback_name}}")
        return True


{{/ after_state_change }}
{{# triggers }}
    {{# conditions.0 }}
    #####
    # Callbacks for transition {{name}}
    #####
    {{/ conditions.0 }}

    {{# conditions }}
    def {{callback_name}}(self):
        print("Condition Callback: {{callback_name}}")
        return True


    {{/ conditions }}
{{/ triggers }}
{{# states }}
    {{# on_enter }}
    {{#on_enter.0}}
    #####
    # On Enter Callbacks for state {{name}}
    #####
    {{/on_enter.0}}

    def {{callback_name}}(self):
        print("on_enter Callback: {{callback_name}}")
        return True


    {{/ on_enter }}
    {{# on_exit }}
    {{#on_exit.0}}
    #####
    # On Exit Callbacks for state {{name}}
    #####
    {{/on_exit.0}}
    def {{callback_name}}(self):
        print("on_exit Callback: {{callback_name}}")
        return True


    {{/ on_exit }}
{{/ states }}
class Hyper_MarkupMachine(MarkupMachine):
    def __init__(self, *args, **kwargs):
        """
        MarkupMachine extended with Hypermedia revelvant functions
        """
        MarkupMachine.__init__(self, *args, **kwargs)

    def get_current_state(self):
        return self.model.state

    def get_current_triggers(self):
        return self.get_triggers(self.get_current_state())

    def get_current_triggers_dict(self):
        trigger_list = []
        for trigger in self.get_triggers(self.get_current_state()):
            trigger_dict = {'trigger': trigger}
            trigger_list.append(trigger_dict)
        return trigger_list
        
    def get_actions_dict(self, id=''):
        actions = []
        for trigger in self.get_current_triggers_dict():
            new_action = Action(name=trigger['trigger'], 
                                title="transition", 
                                method="GET",
                                href="http://localhost:8763/v1/{{path_name}}/" + str(id) + "/" + trigger['trigger'] )
            actions.append(new_action)
        return actions

    def state(self):
        return self.model.state


{{object_name}} = {{class_name}}()

# Initialize
{{instance_name}} = Hyper_MarkupMachine({{object_name}}, 
                        states=states, 
                        transitions=transitions, 
                        initial={{# states }}{{# initial }}'{{name}}'{{/ initial }}{{/ states }},
                        before_state_change=[{{#before_state_change}}'{{callback_name}}'{{^last}}, {{/last}}{{/before_state_change}}],
                        after_state_change=[{{#after_state_change}}'{{callback_name}}'{{^last}}, {{/last}}{{/after_state_change}}],
                        ignore_invalid_triggers={{#ignore_invalid_triggers}}True{{/ignore_invalid_triggers}}{{^ignore_invalid_triggers}}False{{/ignore_invalid_triggers}},
                        auto_transitions={{#auto_transitions}}True{{/auto_transitions}}{{^auto_transitions}}False{{/auto_transitions}}
                       )
